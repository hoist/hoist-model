{"version":3,"sources":["models/connector_setting.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,WAAW,QAAQ,UAAR,CAAX;AACJ,IAAI,UAAU,QAAQ,yBAAR,CAAV;AACJ,IAAI,aAAa,QAAQ,oBAAR,CAAb;AACJ,IAAI,YAAY,QAAQ,UAAR,CAAZ;AACJ,IAAI,SAAS,SAAS,MAAT;AACb,IAAI,eAAe,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAAf;AACJ,IAAI,iBAAiB,QAAQ,wBAAR,CAAjB;AACJ,IAAI,SAAS,QAAQ,cAAR,CAAT;AACJ,IAAI,yBAAyB,IAAI,MAAJ,CAAW;AACtC,iBAAe,MAAf;AACA,OAAK;AACH,UAAM,OAAN;AACA,UAAM,EAAN;AACA,aAAS,CAAT;AACA,SAAK,EAAL;GAJF;AAMA,eAAa;AACX,UAAM,OAAN;AACA,SAAK,aAAL;AACA,WAAO,IAAP;AACA,cAAU,0CAAV;GAJF;AAMA,eAAa;AACX,UAAM,MAAN;AACA,UAAM;AACJ,cAAQ,YAAR;AACA,eAAS,+CAAT;KAFF;AAIA,cAAU,+CAAV;GANF;AAQA,QAAM;AACJ,UAAM,MAAN;AACA,cAAU,4BAAV;GAFF;AAIA,iBAAe,MAAf;AACA,YAAU;AACR,UAAM,OAAO,KAAP,CAAa,KAAb;GADR;AAGA,oBAAkB;AAChB,UAAM,CAAC,MAAD,CAAN;AACA,cAAU,KAAV;AACA,aAAS,oBAAY;AACnB,aAAO,EAAP,CADmB;KAAZ;GAHX;AAOA,uBAAqB,OAArB;AACA,OAAK;AACH,UAAM,MAAN;AACA,cAAU,IAAV;AACA,aAAS,oBAAY;AACnB,aAAO,OAAO,CAAP,EAAP,CADmB;KAAZ;GAHX;AAOA,cAAY;AACV,UAAM,MAAN;GADF;CA7C2B,CAAzB;;AAkDJ,uBAAuB,MAAvB,CAA8B,UAA9B;AACA,uBAAuB,MAAvB,CAA8B,cAA9B;AACA,uBAAuB,KAAvB,CAA6B;AAC3B,OAAK,CAAL;AACA,eAAa,CAAb;AACA,eAAa,CAAb;CAHF,EAIG;AACD,UAAQ,IAAR;CALF;AAOA,SAAS,KAAT,CAAe,kBAAf,EAAmC,sBAAnC;;AAEA,IAAI,mBAAmB,SAAS,KAAT,CAAe,kBAAf,CAAnB;AACJ,UAAU,YAAV,CAAuB,gBAAvB;AACA,UAAU,YAAV,CAAuB,iBAAiB,SAAjB,CAAvB;AACA,QAAQ,IAAR,GAAe,kBAAf;AACA,QAAQ,KAAR,GAAgB,gBAAhB","file":"models/connector_setting.js","sourcesContent":["'use strict';\nvar mongoose = require('mongoose');\nvar ShortId = require('@hoist/mongoose-shortid');\nvar timestamps = require('mongoose-timestamp');\nvar BBPromise = require('bluebird');\nvar Schema = mongoose.Schema;\nvar environments = ['live', 'test', 'dev'];\nvar mongooseDelete = require('@hoist/mongoose-delete');\nvar keygen = require('keygenerator');\nvar ConnectorSettingSchema = new Schema({\n  schemaVersion: String,\n  _id: {\n    type: ShortId,\n    base: 64,\n    retries: 4,\n    len: 20\n  },\n  application: {\n    type: ShortId,\n    ref: 'Application',\n    index: true,\n    required: 'connectors must belong to an application'\n  },\n  environment: {\n    type: String,\n    enum: {\n      values: environments,\n      message: 'connectors must belong to a valid environment'\n    },\n    required: 'connectors must belong to a valid environment'\n  },\n  name: {\n    type: String,\n    required: 'connector must have a name'\n  },\n  connectorType: String,\n  settings: {\n    type: Schema.Types.Mixed\n  },\n  subscribedEvents: {\n    type: [String],\n    required: false,\n    default: function () {\n      return [];\n    }\n  },\n  isOneClickConnector: Boolean,\n  key: {\n    type: String,\n    required: true,\n    default: function () {\n      return keygen._();\n    }\n  },\n  defaultKey: {\n    type: String\n  }\n});\n\nConnectorSettingSchema.plugin(timestamps);\nConnectorSettingSchema.plugin(mongooseDelete);\nConnectorSettingSchema.index({\n  key: 1,\n  application: 1,\n  environment: 1\n}, {\n  unique: true\n});\nmongoose.model('ConnectorSetting', ConnectorSettingSchema);\n\nvar ConnectorSetting = mongoose.model('ConnectorSetting');\nBBPromise.promisifyAll(ConnectorSetting);\nBBPromise.promisifyAll(ConnectorSetting.prototype);\nexports.name = 'ConnectorSetting';\nexports.model = ConnectorSetting;\n"],"sourceRoot":"/source/"}