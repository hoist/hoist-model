{"version":3,"sources":["models/ip_log.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,cAAc,qBAAW;AAC3B,MAAI;AACF,UAAM,MAAN;AACA,WAAO,IAAP;GAFF;AAIA,WAAS;AACP,UAAM,OAAN;AACA,aAAS,KAAT;GAFF;CALgB,EASf;AACD,UAAQ,SAAR;CAVgB,CAAd;AAYJ,YAAY,OAAZ,CAAoB,QAApB,GAA+B,gBAE5B;MADD,2BACC;;AACD,SAAO,KAAK,UAAL,CAAgB;AACrB,QAAI,SAAJ;AACA,aAAS,KAAT;AACA,eAAW;AACT,WAAK,iBAAO,GAAP,GAAa,GAAb,CAAiB,CAAC,CAAD,EAAI,SAArB,EAAgC,MAAhC,EAAL;KADF;GAHK,EAMJ,IANI,CAMC,UAAU,IAAV,EAAgB;AACtB,QAAI,OAAO,CAAP,EAAU;AACZ,YAAM,IAAI,iBAAO,IAAP,CAAY,OAAZ,CAAoB,aAApB,EAAV,CADY;KAAd;AAGA,WAAO,IAAP,CAJsB;GAAhB,CANR,CADC;CAF4B;AAgB/B,YAAY,MAAZ;AACA,YAAY,KAAZ,CAAkB;AAChB,aAAW,CAAC,CAAD;CADb,EAEG;AACD,cAAY,IAAZ;AACA,UAAQ,IAAR;CAJF;AAMA,IAAI,QAAQ,mBAAS,KAAT,CAAe,OAAf,EAAwB,WAAxB,CAAR;AACJ,mBAAQ,YAAR,CAAqB,KAArB;AACA,mBAAQ,YAAR,CAAqB,MAAM,SAAN,CAArB;AACO,IAAM,sBAAO,OAAP;AACN,IAAM,wBAAQ,mBAAS,KAAT,CAAe,OAAf,CAAR","file":"models/ip_log.js","sourcesContent":["import mongoose, {\n  Schema\n}\nfrom 'mongoose';\nimport Promise from 'bluebird';\nimport moment from 'moment';\nimport errors from '@hoist/errors';\nimport mongooseTimestamps from 'mongoose-timestamp';\n\nvar IpLogSchema = new Schema({\n  ip: {\n    type: String,\n    index: true\n  },\n  success: {\n    type: Boolean,\n    default: false\n  }\n}, {\n  capped: 314572800\n});\nIpLogSchema.statics.assertIP = function ({\n  ipAddress\n}) {\n  return this.countAsync({\n    ip: ipAddress,\n    success: false,\n    createdAt: {\n      $gt: moment.utc().add(-2, 'minutes').toDate()\n    },\n  }).then(function (logs) {\n    if (logs > 9) {\n      throw new errors.user.request.IPLockedError();\n    }\n    return true;\n  });\n}\nIpLogSchema.plugin(mongooseTimestamps);\nIpLogSchema.index({\n  createdAt: -1\n}, {\n  background: true,\n  sparse: true\n});\nlet IpLog = mongoose.model('IpLog', IpLogSchema);\nPromise.promisifyAll(IpLog);\nPromise.promisifyAll(IpLog.prototype);\nexport const name = 'IpLog';\nexport const model = mongoose.model('IpLog');\n"],"sourceRoot":"/source/"}