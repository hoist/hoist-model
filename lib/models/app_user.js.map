{"version":3,"sources":["models/app_user.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,WAAW,QAAQ,UAAR,CAAX;AACJ,IAAI,UAAU,QAAQ,yBAAR,CAAV;AACJ,IAAI,aAAa,QAAQ,oBAAR,CAAb;AACJ,IAAI,YAAY,QAAQ,UAAR,CAAZ;AACJ,IAAI,SAAS,SAAS,MAAT;AACb,IAAI,YAAY,QAAQ,WAAR,CAAZ;AACJ,IAAI,eAAe,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAAf;AACJ,IAAI,iBAAiB,QAAQ,wBAAR,CAAjB;AACJ,IAAI,SAAS,QAAQ,QAAR,CAAT;AACJ,IAAI,SAAS,QAAQ,QAAR,CAAT;;AAEJ,IAAI,gBAAgB,IAAI,MAAJ,CAAW;AAC7B,iBAAe,MAAf;;AAEA,OAAK;AACH,UAAM,OAAN;AACA,UAAM,EAAN;AACA,aAAS,CAAT;AACA,SAAK,EAAL;GAJF;AAMA,eAAa;AACX,UAAM,OAAN;AACA,SAAK,aAAL;AACA,cAAU,qCAAV;GAHF;AAKA,eAAa;AACX,UAAM,MAAN;AACA,UAAM;AACJ,cAAQ,YAAR;AACA,eAAS,0CAAT;KAFF;AAIA,cAAU,0CAAV;GANF;AAQA,SAAO;AACL,cAAU;AACR,YAAM,OAAN;AACA,WAAK,MAAL;KAFF;AAIA,iBAAa,CAAC;AACZ,WAAK,KAAL;AACA,YAAM;AACJ,cAAM,OAAN;AACA,aAAK,MAAL;OAFF;AAIA,cAAQ;AACN,cAAM,OAAN;AACA,aAAK,QAAL;OAFF;KANW,CAAb;GALF;AAiBA,QAAM;AACJ,UAAM,OAAO,KAAP,CAAa,KAAb;GADR;AAGA,kBAAgB,CAAC;AACf,SAAK,KAAL;AACA,aAAS;AACP,YAAM,MAAN;AACA,aAAO,IAAP;AACA,gBAAU,2BAAV;AACA,gBAAU,CAER,UAAU,KAAV,EAAiB;AACf,eAAO,UAAU,OAAV,CAAkB,KAAlB,CAAP,CADe;OAAjB,EAEG,wCAJK,CAAV;KAJF;AAWA,cAAU;AACR,YAAM,OAAN;KADF;GAbc,CAAhB;CA1CkB,CAAhB;;AA6DJ,cAAc,MAAd,CAAqB,UAArB;AACA,cAAc,MAAd,CAAqB,cAArB;;AAEA,cAAc,MAAd,CAAqB;AACnB,kBAAgB,wBAAU,QAAV,EAAoB;AAClC,WAAO,OAAO,WAAP,CAAmB,QAAnB,EAA6B,KAAK,YAAL,CAApC,CADkC;GAApB;AAGhB,eAAa,qBAAU,QAAV,EAAoB,QAApB,EAA8B;AACzC,WAAO,UAAU,GAAV,CAAc,YAAY;AAC/B,aAAO,OAAO,YAAP,CAAoB,OAAO,GAAP,CAAW,iCAAX,CAApB,CAAP,CAD+B;KAAZ,CAAd,CAEJ,IAFI,CAEC,IAFD,EAEO,IAFP,CAEY,UAAU,IAAV,EAAgB;AACjC,aAAO,OAAO,SAAP,CAAiB,QAAjB,EAA2B,IAA3B,CAAP,CADiC;KAAhB,CAFZ,CAIJ,IAJI,CAIC,UAAU,YAAV,EAAwB;AAC9B,WAAK,YAAL,GAAoB,YAApB,CAD8B;KAAxB,CAJD,CAMJ,OANI,CAMI,QANJ,CAAP,CADyC;GAA9B;CAJf;AAcA,cAAc,KAAd,CAAoB;AAClB,eAAa,CAAb;AACA,eAAa,CAAb;CAFF;;AAKA,SAAS,KAAT,CAAe,SAAf,EAA0B,aAA1B;;AAEA,IAAI,UAAU,SAAS,KAAT,CAAe,SAAf,CAAV;AACJ,UAAU,YAAV,CAAuB,OAAvB;AACA,UAAU,YAAV,CAAuB,QAAQ,SAAR,CAAvB;AACA,QAAQ,IAAR,GAAe,SAAf;AACA,QAAQ,KAAR,GAAgB,OAAhB","file":"models/app_user.js","sourcesContent":["'use strict';\nvar mongoose = require('mongoose');\nvar ShortId = require('@hoist/mongoose-shortid');\nvar timestamps = require('mongoose-timestamp');\nvar BBPromise = require('bluebird');\nvar Schema = mongoose.Schema;\nvar validator = require('validator');\nvar environments = ['live', 'test', 'dev'];\nvar mongooseDelete = require('@hoist/mongoose-delete');\nvar bcrypt = require('bcrypt');\nvar config = require('config');\n\nvar AppUserSchema = new Schema({\n  schemaVersion: String,\n  //the org that owns this application\n  _id: {\n    type: ShortId,\n    base: 64,\n    retries: 4,\n    len: 20\n  },\n  application: {\n    type: ShortId,\n    ref: 'Application',\n    required: 'users must belong to an application'\n  },\n  environment: {\n    type: String,\n    enum: {\n      values: environments,\n      message: 'users must belong to a valid environment'\n    },\n    required: 'users must belong to a valid environment'\n  },\n  roles: {\n    mainRole: {\n      type: ShortId,\n      ref: 'Role'\n    },\n    bucketRoles: [{\n      _id: false,\n      role: {\n        type: ShortId,\n        ref: 'Role'\n      },\n      bucket: {\n        type: ShortId,\n        ref: 'Bucket'\n      }\n    }]\n  },\n  meta: {\n    type: Schema.Types.Mixed\n  },\n  emailAddresses: [{\n    _id: false,\n    address: {\n      type: String,\n      index: true,\n      required: 'email address is required',\n      validate: [\n\n        function (email) {\n          return validator.isEmail(email);\n        }, 'the email address {VALUE} is not valid'\n      ]\n    },\n    verified: {\n      type: Boolean\n    }\n  }]\n});\n\nAppUserSchema.plugin(timestamps);\nAppUserSchema.plugin(mongooseDelete);\n\nAppUserSchema.method({\n  verifyPassword: function (password) {\n    return bcrypt.compareSync(password, this.passwordHash);\n  },\n  setPassword: function (password, callback) {\n    return BBPromise.try(function () {\n      return bcrypt.genSaltAsync(config.get('Hoist.security.passwordStrength'));\n    }).bind(this).then(function (salt) {\n      return bcrypt.hashAsync(password, salt);\n    }).then(function (passwordHash) {\n      this.passwordHash = passwordHash;\n    }).nodeify(callback);\n  }\n});\nAppUserSchema.index({\n  application: 1,\n  environment: 1\n});\n\nmongoose.model('AppUser', AppUserSchema);\n\nvar AppUser = mongoose.model('AppUser');\nBBPromise.promisifyAll(AppUser);\nBBPromise.promisifyAll(AppUser.prototype);\nexports.name = 'AppUser';\nexports.model = AppUser;\n"],"sourceRoot":"/source/"}