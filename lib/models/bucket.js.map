{"version":3,"sources":["models/bucket.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,WAAW,QAAQ,UAAR,CAAX;AACJ,IAAI,UAAU,QAAQ,yBAAR,CAAV;AACJ,IAAI,SAAS,SAAS,MAAT;AACb,IAAI,YAAY,QAAQ,UAAR,CAAZ;AACJ,IAAI,aAAa,QAAQ,oBAAR,CAAb;AACJ,IAAI,eAAe,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAAf;AACJ,IAAI,iBAAiB,QAAQ,wBAAR,CAAjB;AACJ,IAAI,SAAS,QAAQ,cAAR,CAAT;;AAEJ,IAAI,eAAe,IAAI,MAAJ,CAAW;AAC5B,iBAAe,MAAf;;AAEA,OAAK;AACH,UAAM,OAAN;AACA,UAAM,EAAN;AACA,aAAS,CAAT;AACA,SAAK,EAAL;GAJF;AAMA,eAAa;AACX,UAAM,OAAN;AACA,SAAK,aAAL;AACA,cAAU,sCAAV;GAHF;AAKA,eAAa;AACX,UAAM,MAAN;AACA,UAAM;AACJ,cAAQ,YAAR;AACA,eAAS,2CAAT;KAFF;AAIA,cAAU,2CAAV;GANF;AAQA,OAAK;AACH,UAAM,MAAN;AACA,cAAU,IAAV;AACA,aAAS,oBAAY;AACnB,aAAO,OAAO,CAAP,EAAP,CADmB;KAAZ;GAHX;AAOA,QAAM;AACJ,UAAM,OAAO,KAAP,CAAa,KAAb;AACN,aAAS,EAAT;GAFF;CA7BiB,EAiChB;AACD,QAAM,SAAN;CAlCiB,CAAf;;AAqCJ,aAAa,MAAb,CAAoB,UAApB;AACA,aAAa,MAAb,CAAoB,cAApB;AACA,aAAa,KAAb,CAAmB;AACjB,eAAa,CAAb;AACA,eAAa,CAAb;CAFF;AAIA,aAAa,KAAb,CAAmB;AACjB,OAAK,CAAL;AACA,eAAa,CAAb;AACA,eAAa,CAAb;CAHF,EAIG;AACD,UAAQ,IAAR;CALF;AAOA,SAAS,KAAT,CAAe,QAAf,EAAyB,YAAzB;;AAEA,IAAI,SAAS,SAAS,KAAT,CAAe,QAAf,CAAT;AACJ,UAAU,YAAV,CAAuB,MAAvB;AACA,UAAU,YAAV,CAAuB,OAAO,SAAP,CAAvB;AACA,QAAQ,IAAR,GAAe,QAAf;AACA,QAAQ,KAAR,GAAgB,MAAhB","file":"models/bucket.js","sourcesContent":["'use strict';\nvar mongoose = require('mongoose');\nvar ShortId = require('@hoist/mongoose-shortid');\nvar Schema = mongoose.Schema;\nvar BBPromise = require('bluebird');\nvar timestamps = require('mongoose-timestamp');\nvar environments = ['live', 'test', 'dev'];\nvar mongooseDelete = require('@hoist/mongoose-delete');\nvar keygen = require('keygenerator');\n\nvar BucketSchema = new Schema({\n  schemaVersion: String,\n  //the org that owns this application\n  _id: {\n    type: ShortId,\n    base: 64,\n    retries: 4,\n    len: 20\n  },\n  application: {\n    type: ShortId,\n    ref: 'Application',\n    required: 'bucket must belong to an application'\n  },\n  environment: {\n    type: String,\n    enum: {\n      values: environments,\n      message: 'bucket must belong to a valid environment'\n    },\n    required: 'bucket must belong to a valid environment'\n  },\n  key: {\n    type: String,\n    required: true,\n    default: function () {\n      return keygen._();\n    }\n  },\n  meta: {\n    type: Schema.Types.Mixed,\n    default: {}\n  }\n}, {\n  read: 'nearest'\n});\n\nBucketSchema.plugin(timestamps);\nBucketSchema.plugin(mongooseDelete);\nBucketSchema.index({\n  application: 1,\n  environment: 1\n});\nBucketSchema.index({\n  key: 1,\n  application: 1,\n  environment: 1\n}, {\n  unique: true\n});\nmongoose.model('Bucket', BucketSchema);\n\nvar Bucket = mongoose.model('Bucket');\nBBPromise.promisifyAll(Bucket);\nBBPromise.promisifyAll(Bucket.prototype);\nexports.name = 'Bucket';\nexports.model = Bucket;\n"],"sourceRoot":"/source/"}