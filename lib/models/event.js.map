{"version":3,"sources":["models/event.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,WAAW,QAAQ,UAAR,CAAX;AACJ,IAAI,UAAU,QAAQ,yBAAR,CAAV;AACJ,IAAI,aAAa,QAAQ,oBAAR,CAAb;AACJ,IAAI,YAAY,QAAQ,UAAR,CAAZ;AACJ,IAAI,SAAS,SAAS,MAAT;AACb,IAAI,eAAe,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAAf;AACJ,IAAI,iBAAiB,QAAQ,wBAAR,CAAjB;AACJ,IAAI,cAAc,IAAI,MAAJ,CAAW;AAC3B,iBAAe,MAAf;AACA,iBAAe;AACb,UAAM,OAAN;AACA,SAAK,aAAL;AACA,WAAO,IAAP;AACA,cAAU,sCAAV;GAJF;AAMA,eAAa;AACX,UAAM,MAAN;AACA,UAAM;AACJ,cAAQ,YAAR;AACA,eAAS,2CAAT;KAFF;AAIA,cAAU,2CAAV;GANF;AAQA,WAAS;AACP,UAAM,OAAO,KAAP,CAAa,KAAb;AACN,aAAS,oBAAY;AACnB,aAAO,EAAP,CADmB;KAAZ;GAFX;AAMA,YAAU;AACR,UAAM,MAAN;AACA,aAAS,CAAT;GAFF;AAIA,WAAS,MAAT;AACA,aAAW,MAAX;AACA,iBAAe,MAAf;AACA,YAAU;AACR,UAAM,OAAN;AACA,SAAK,QAAL;GAFF;AAIA,eAAa;AACX,UAAM,OAAN;AACA,aAAS,KAAT;GAFF;AAIA,aAAW;AACT,UAAM,OAAN;AACA,SAAK,SAAL;GAFF;CArCgB,EAyCf;AACD,QAAM,SAAN;CA1CgB,CAAd;;AA6CJ,YAAY,MAAZ,CAAmB,UAAnB;AACA,YAAY,MAAZ,CAAmB,cAAnB;;AAEA,YAAY,KAAZ,CAAkB;AAChB,iBAAe,CAAf;AACA,WAAS,CAAT;CAFF,EAGG;AACD,UAAQ,IAAR;CAJF;;AAOA,YAAY,IAAZ,CAAiB,WAAjB,EAA8B,KAA9B,CAAoC;AAClC,WAAS,MAAT;CADF;AAGA,SAAS,KAAT,CAAe,OAAf,EAAwB,WAAxB;;AAEA,IAAI,QAAQ,SAAS,KAAT,CAAe,OAAf,CAAR;AACJ,UAAU,YAAV,CAAuB,KAAvB;AACA,UAAU,YAAV,CAAuB,MAAM,SAAN,CAAvB;AACA,QAAQ,IAAR,GAAe,OAAf;AACA,QAAQ,KAAR,GAAgB,KAAhB","file":"models/event.js","sourcesContent":["'use strict';\nvar mongoose = require('mongoose');\nvar ShortId = require('@hoist/mongoose-shortid');\nvar timestamps = require('mongoose-timestamp');\nvar BBPromise = require('bluebird');\nvar Schema = mongoose.Schema;\nvar environments = ['live', 'test', 'dev'];\nvar mongooseDelete = require('@hoist/mongoose-delete');\nvar EventSchema = new Schema({\n  schemaVersion: String,\n  applicationId: {\n    type: ShortId,\n    ref: 'Application',\n    index: true,\n    required: 'events must belong to an application'\n  },\n  environment: {\n    type: String,\n    enum: {\n      values: environments,\n      message: 'events must belong to a valid environment'\n    },\n    required: 'events must belong to a valid environment'\n  },\n  payload: {\n    type: Schema.Types.Mixed,\n    default: function () {\n      return {};\n    }\n  },\n  priority: {\n    type: Number,\n    default: 3\n  },\n  eventId: String,\n  eventName: String,\n  correlationId: String,\n  bucketId: {\n    type: ShortId,\n    ref: 'Bucket'\n  },\n  synchronous: {\n    type: Boolean,\n    default: false\n  },\n  sessionId: {\n    type: ShortId,\n    ref: 'Session'\n  }\n}, {\n  read: 'nearest'\n});\n\nEventSchema.plugin(timestamps);\nEventSchema.plugin(mongooseDelete);\n\nEventSchema.index({\n  applicationId: 1,\n  eventId: 1\n}, {\n  unique: true\n});\n\nEventSchema.path('createdAt').index({\n  expires: 604800\n});\nmongoose.model('Event', EventSchema);\n\nvar Event = mongoose.model('Event');\nBBPromise.promisifyAll(Event);\nBBPromise.promisifyAll(Event.prototype);\nexports.name = 'Event';\nexports.model = Event;\n"],"sourceRoot":"/source/"}