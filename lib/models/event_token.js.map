{"version":3,"sources":["models/event_token.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,WAAW,QAAQ,UAAR,CAAX;AACJ,IAAI,UAAU,QAAQ,yBAAR,CAAV;AACJ,IAAI,aAAa,QAAQ,oBAAR,CAAb;AACJ,IAAI,eAAe,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAAf;AACJ,IAAI,YAAY,QAAQ,UAAR,CAAZ;AACJ,IAAI,SAAS,SAAS,MAAT;AACb,IAAI,iBAAiB,QAAQ,wBAAR,CAAjB;AACJ,IAAI,SAAS,QAAQ,cAAR,CAAT;;AAEJ,IAAI,mBAAmB,IAAI,MAAJ,CAAW;AAChC,iBAAe,MAAf;AACA,OAAK;AACH,UAAM,OAAN;AACA,UAAM,EAAN;AACA,aAAS,CAAT;AACA,SAAK,EAAL;GAJF;AAMA,YAAU;AACR,UAAM,IAAN;AACA,aAAS,KAAK,GAAL,EAAT;GAFF;AAIA,QAAM;AACJ,UAAM,MAAN;AACA,WAAO,IAAP;AACA,cAAU,kBAAV;AACA,YAAQ,IAAR;AACA,aAAS,oBAAY;AACnB,aAAO,OAAO,CAAP,EAAP,CADmB;KAAZ;GALX;AASA,eAAa;AACX,UAAM,OAAN;AACA,SAAK,aAAL;AACA,WAAO,IAAP;AACA,cAAU,4CAAV;GAJF;AAMA,eAAa;AACX,UAAM,MAAN;AACA,UAAM;AACJ,cAAQ,YAAR;AACA,eAAS,iDAAT;KAFF;AAIA,cAAU,iDAAV;GANF;CA3BqB,CAAnB;;AAqCJ,iBAAiB,MAAjB,CAAwB,cAAxB;AACA,iBAAiB,MAAjB,CAAwB,UAAxB;;AAEA,SAAS,KAAT,CAAe,YAAf,EAA6B,gBAA7B;;AAEA,IAAI,aAAa,SAAS,KAAT,CAAe,YAAf,CAAb;AACJ,UAAU,YAAV,CAAuB,UAAvB;AACA,UAAU,YAAV,CAAuB,WAAW,SAAX,CAAvB;AACA,QAAQ,IAAR,GAAe,YAAf;AACA,QAAQ,KAAR,GAAgB,UAAhB","file":"models/event_token.js","sourcesContent":["'use strict';\nvar mongoose = require('mongoose');\nvar ShortId = require('@hoist/mongoose-shortid');\nvar timestamps = require('mongoose-timestamp');\nvar environments = ['live', 'test', 'dev'];\nvar BBPromise = require('bluebird');\nvar Schema = mongoose.Schema;\nvar mongooseDelete = require('@hoist/mongoose-delete');\nvar keygen = require('keygenerator');\n\nvar EventTokenSchema = new Schema({\n  schemaVersion: String,\n  _id: {\n    type: ShortId,\n    base: 64,\n    retries: 4,\n    len: 20\n  },\n  lastUsed: {\n    type: Date,\n    default: Date.now()\n  },\n  code: {\n    type: String,\n    index: true,\n    required: 'Must have a code',\n    unique: true,\n    default: function () {\n      return keygen._();\n    }\n  },\n  application: {\n    type: ShortId,\n    ref: 'Application',\n    index: true,\n    required: 'event tokens must belong to an application'\n  },\n  environment: {\n    type: String,\n    enum: {\n      values: environments,\n      message: 'event tokens must belong to a valid environment'\n    },\n    required: 'event tokens must belong to a valid environment'\n  }\n});\n\nEventTokenSchema.plugin(mongooseDelete);\nEventTokenSchema.plugin(timestamps);\n\nmongoose.model('EventToken', EventTokenSchema);\n\nvar EventToken = mongoose.model('EventToken');\nBBPromise.promisifyAll(EventToken);\nBBPromise.promisifyAll(EventToken.prototype);\nexports.name = 'EventToken';\nexports.model = EventToken;\n"],"sourceRoot":"/source/"}