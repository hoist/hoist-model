{"version":3,"sources":["models/login_log.js"],"names":[],"mappings":"AAAA;;;;;;;AACA;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAI,iBAAiB,qBAAW;AAC9B,YAAU;AACR,UAAM,MAAN;AACA,WAAO,IAAP;GAFF;AAIA,WAAS;AACP,UAAM,OAAN;AACA,WAAO,IAAP;GAFF;CALmB,EASlB;AACD,UAAQ,SAAR;CAVmB,CAAjB;;AAaJ,eAAe,OAAf,CAAuB,UAAvB,GAAoC,gBAGjC;MAFD,qCAEC;MADD,2CACC;;AACD,MAAI,cAAc,iBAAO,GAAP,GAAa,GAAb,CAAiB,CAAC,CAAD,EAAI,SAArB,CAAd,CADH;AAED,MAAI,qBAAqB,YAAY,QAAZ,CAAqB,sBAAO,iBAAP,CAArB,CAArB,EAAsE;AACxE,kBAAc,sBAAO,iBAAP,CAAd,CADwE;GAA1E;AAGA,SAAO,KAAK,UAAL,CAAgB;AACrB,cAAU;AACR,WAAK,eAAe,GAAf,CAAmB;YACtB;eACI,QAAQ,WAAR;OAFkB,CAAxB;KADF;AAKA,aAAS,KAAT;AACA,eAAW;AACT,WAAK,WAAL;KADF;GAPK,EAUJ,IAVI,CAUC,UAAC,cAAD,EAAoB;AAC1B,QAAI,iBAAiB,CAAjB,EAAoB;AACtB,YAAM,IAAI,iBAAO,IAAP,CAAY,OAAZ,CAAoB,kBAApB,EAAV,CADsB;KAAxB;AAGA,WAAO,IAAP,CAJ0B;GAApB,CAVR,CALC;CAHiC;AAyBpC,eAAe,MAAf;AACA,eAAe,KAAf,CAAqB;AACnB,aAAW,CAAC,CAAD;CADb,EAEG;AACD,cAAY,IAAZ;AACA,UAAQ,IAAR;CAJF;AAMA,IAAI,WAAW,mBAAS,KAAT,CAAe,UAAf,EAA2B,cAA3B,CAAX;;AAGJ,mBAAQ,YAAR,CAAqB,QAArB;AACA,mBAAQ,YAAR,CAAqB,SAAS,SAAT,CAArB;AACO,IAAM,sBAAO,UAAP;AACN,IAAM,wBAAQ,mBAAS,KAAT,CAAe,UAAf,CAAR","file":"models/login_log.js","sourcesContent":["'use strict';\nimport mongoose, {\n  Schema\n}\nfrom 'mongoose';\nimport moment from 'moment';\nimport Promise from 'bluebird';\nimport errors from '@hoist/errors';\nimport mongooseTimestamps from 'mongoose-timestamp';\nlet LoginLogSchema = new Schema({\n  username: {\n    type: String,\n    index: true\n  },\n  success: {\n    type: Boolean,\n    index: true\n  }\n}, {\n  capped: 314572800\n});\n\nLoginLogSchema.statics.assertUser = function ({\n  emailAddresses,\n  passwordResetDate\n}) {\n  let windowStart = moment.utc().add(-2, 'minutes');\n  if (passwordResetDate && windowStart.isBefore(moment(passwordResetDate))) {\n    windowStart = moment(passwordResetDate);\n  }\n  return this.countAsync({\n    username: {\n      $in: emailAddresses.map(({\n        address\n      }) => address.toLowerCase())\n    },\n    success: false,\n    createdAt: {\n      $gt: windowStart\n    }\n  }).then((failedLogCount) => {\n    if (failedLogCount > 4) {\n      throw new errors.user.request.AccountLockedError();\n    }\n    return true;\n  });\n};\nLoginLogSchema.plugin(mongooseTimestamps);\nLoginLogSchema.index({\n  createdAt: -1\n}, {\n  background: true,\n  sparse: true\n});\nlet LoginLog = mongoose.model('LoginLog', LoginLogSchema);\n\n\nPromise.promisifyAll(LoginLog);\nPromise.promisifyAll(LoginLog.prototype);\nexport const name = 'LoginLog';\nexport const model = mongoose.model('LoginLog');\n"],"sourceRoot":"/source/"}