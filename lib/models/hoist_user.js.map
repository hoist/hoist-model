{"version":3,"sources":["models/hoist_user.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,WAAW,QAAQ,UAAR,CAAX;AACJ,IAAI,UAAU,QAAQ,yBAAR,CAAV;AACJ,IAAI,aAAa,QAAQ,oBAAR,CAAb;AACJ,IAAI,YAAY,QAAQ,UAAR,CAAZ;AACJ,IAAI,SAAS,SAAS,MAAT;AACb,IAAI,SAAS,QAAQ,QAAR,CAAT;AACJ,IAAI,YAAY,QAAQ,WAAR,CAAZ;AACJ,IAAI,iBAAiB,QAAQ,wBAAR,CAAjB;AACJ,IAAI,SAAS,UAAU,YAAV,CAAuB,QAAQ,QAAR,CAAvB,CAAT;;AAEJ,IAAI,kBAAkB,IAAI,MAAJ,CAAW;AAC/B,iBAAe,MAAf;;AAEA,OAAK;AACH,UAAM,OAAN;AACA,UAAM,EAAN;AACA,aAAS,CAAT;AACA,SAAK,EAAL;GAJF;AAMA,QAAM;AACJ,UAAM,MAAN;GADF;AAGA,eAAa;AACX,UAAM,MAAN;AACA,YAAQ,IAAR;AACA,YAAQ,IAAR;GAHF;AAKA,iBAAe,CAAC;AACd,UAAM,OAAN;AACA,cAAU,qCAAV;AACA,SAAK,cAAL;GAHa,CAAf;AAKA,oBAAkB,MAAlB;AACA,kBAAgB,CAAC;AACf,SAAK,KAAL;AACA,aAAS;AACP,YAAM,MAAN;AACA,aAAO,IAAP;AACA,cAAQ,IAAR;AACA,gBAAU,2BAAV;AACA,gBAAU,CAER,UAAU,KAAV,EAAiB;AACf,eAAO,UAAU,OAAV,CAAkB,KAAlB,CAAP,CADe;OAAjB,EAEG,wCAJK,CAAV;KALF;AAYA,cAAU;AACR,YAAM,OAAN;KADF;GAdc,CAAhB;AAkBA,gBAAc;AACZ,UAAM,MAAN;GADF;AAGA,QAAM;AACJ,UAAM,MAAN;AACA,UAAM,CAAC,MAAD,EAAS,KAAT,CAAN;AACA,aAAS,MAAT;AACA,eAAW,IAAX;GAJF;AAMA,qBAAmB,IAAnB;AACA,UAAQ;AACN,UAAM,OAAO,KAAP,CAAa,KAAb;AACN,aAAS,EAAT;GAFF;CAnDoB,EAuDpB;AACA,QAAM,SAAN;CAxDoB,CAAlB;;AA2DJ,gBAAgB,MAAhB,CAAuB;AACrB,kBAAgB,wBAAU,QAAV,EAAoB;AAClC,WAAO,OAAO,WAAP,CAAmB,QAAnB,EAA6B,KAAK,YAAL,CAApC,CADkC;GAApB;AAGhB,eAAa,qBAAU,QAAV,EAAoB,QAApB,EAA8B;AACzC,WAAO,UAAU,GAAV,CAAc,YAAY;AAC/B,aAAO,OAAO,YAAP,CAAoB,OAAO,GAAP,CAAW,iCAAX,CAApB,CAAP,CAD+B;KAAZ,CAAd,CAEJ,IAFI,CAEC,IAFD,EAEO,IAFP,CAEY,UAAU,IAAV,EAAgB;AACjC,aAAO,OAAO,SAAP,CAAiB,QAAjB,EAA2B,IAA3B,CAAP,CADiC;KAAhB,CAFZ,CAIJ,IAJI,CAIC,UAAU,YAAV,EAAwB;AAC9B,WAAK,YAAL,GAAoB,YAApB,CAD8B;AAE9B,WAAK,iBAAL,GAAyB,KAAK,GAAL,EAAzB,CAF8B;AAG9B,aAAO,IAAP,CAH8B;KAAxB,CAJD,CAQJ,OARI,CAQI,QARJ,CAAP,CADyC;GAA9B;CAJf;;AAiBA,gBAAgB,MAAhB,CAAuB,cAAvB;AACA,gBAAgB,MAAhB,CAAuB,UAAvB;AACA,gBAAgB,KAAhB,CAAsB;AACpB,iBAAe,CAAf;CADF;AAGA,SAAS,KAAT,CAAe,WAAf,EAA4B,eAA5B;;AAEA,IAAI,YAAY,SAAS,KAAT,CAAe,WAAf,CAAZ;AACJ,UAAU,YAAV,CAAuB,SAAvB;AACA,UAAU,YAAV,CAAuB,UAAU,SAAV,CAAvB;AACA,QAAQ,IAAR,GAAe,WAAf;AACA,QAAQ,KAAR,GAAgB,SAAhB","file":"models/hoist_user.js","sourcesContent":["'use strict';\nvar mongoose = require('mongoose');\nvar ShortId = require('@hoist/mongoose-shortid');\nvar timestamps = require('mongoose-timestamp');\nvar BBPromise = require('bluebird');\nvar Schema = mongoose.Schema;\nvar config = require('config');\nvar validator = require('validator');\nvar mongooseDelete = require('@hoist/mongoose-delete');\nvar bcrypt = BBPromise.promisifyAll(require('bcrypt'));\n\nvar HoistUserSchema = new Schema({\n  schemaVersion: String,\n  //the org that owns this application\n  _id: {\n    type: ShortId,\n    base: 64,\n    retries: 4,\n    len: 20\n  },\n  name: {\n    type: String\n  },\n  gitHubToken: {\n    type: String,\n    unique: true,\n    sparse: true\n  },\n  organisations: [{\n    type: ShortId,\n    required: 'User must belong to an Organisation',\n    ref: 'Organisation'\n  }],\n  lastOrganisation: String,\n  emailAddresses: [{\n    _id: false,\n    address: {\n      type: String,\n      index: true,\n      unique: true,\n      required: 'email address is required',\n      validate: [\n\n        function (email) {\n          return validator.isEmail(email);\n        }, 'the email address {VALUE} is not valid'\n      ]\n    },\n    verified: {\n      type: Boolean\n    }\n  }],\n  passwordHash: {\n    type: String\n  },\n  role: {\n    type: String,\n    enum: ['USER', 'GOD'],\n    default: 'USER',\n    uppercase: true\n  },\n  passwordResetDate: Date,\n  uiData: {\n    type: Schema.Types.Mixed,\n    default: {}\n  }\n},{\n  read: 'nearest'\n});\n\nHoistUserSchema.method({\n  verifyPassword: function (password) {\n    return bcrypt.compareSync(password, this.passwordHash);\n  },\n  setPassword: function (password, callback) {\n    return BBPromise.try(function () {\n      return bcrypt.genSaltAsync(config.get('Hoist.security.passwordStrength'));\n    }).bind(this).then(function (salt) {\n      return bcrypt.hashAsync(password, salt);\n    }).then(function (passwordHash) {\n      this.passwordHash = passwordHash;\n      this.passwordResetDate = Date.now();\n      return this;\n    }).nodeify(callback);\n  }\n});\n\nHoistUserSchema.plugin(mongooseDelete);\nHoistUserSchema.plugin(timestamps);\nHoistUserSchema.index({\n  organisations: 1\n});\nmongoose.model('HoistUser', HoistUserSchema);\n\nvar HoistUser = mongoose.model('HoistUser');\nBBPromise.promisifyAll(HoistUser);\nBBPromise.promisifyAll(HoistUser.prototype);\nexports.name = 'HoistUser';\nexports.model = HoistUser;\n"],"sourceRoot":"/source/"}