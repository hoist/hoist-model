{"version":3,"sources":["models/subscription.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,WAAW,QAAQ,UAAR,CAAX;AACJ,IAAI,UAAU,QAAQ,yBAAR,CAAV;AACJ,IAAI,aAAa,QAAQ,oBAAR,CAAb;AACJ,IAAI,eAAe,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAAf;AACJ,IAAI,YAAY,QAAQ,UAAR,CAAZ;AACJ,IAAI,SAAS,SAAS,MAAT;AACb,IAAI,iBAAiB,QAAQ,wBAAR,CAAjB;;AAEJ,IAAI,qBAAqB,IAAI,MAAJ,CAAW;AAClC,iBAAe,MAAf;AACA,OAAK;AACH,UAAM,OAAN;AACA,UAAM,EAAN;AACA,aAAS,CAAT;AACA,SAAK,EAAL;GAJF;AAMA,aAAW;AACT,UAAM,MAAN;AACA,WAAO,IAAP;AACA,cAAU,0CAAV;GAHF;AAKA,UAAQ;AACN,UAAM,OAAN;AACA,aAAS,KAAT;GAFF;AAIA,aAAW,CAAC,MAAD,CAAX;AACA,eAAa;AACX,UAAM,OAAN;AACA,SAAK,aAAL;AACA,WAAO,IAAP;AACA,cAAU,6CAAV;GAJF;AAMA,QAAM;AACJ,UAAM,OAAO,KAAP,CAAa,KAAb;GADR;AAGA,eAAa;AACX,UAAM,MAAN;AACA,UAAM;AACJ,cAAQ,YAAR;AACA,eAAS,kDAAT;KAFF;AAIA,cAAU,kDAAV;GANF;AAQA,YAAU;AACR,UAAM,IAAN;GADF;CAnCuB,CAArB;;AAwCJ,mBAAmB,MAAnB,CAA0B,cAA1B;AACA,mBAAmB,MAAnB,CAA0B,UAA1B;AACA,mBAAmB,KAAnB,CAAyB;AACvB,aAAW,CAAX;AACA,eAAa,CAAb;AACA,eAAa,CAAb;CAHF,EAIG;AACD,UAAQ,IAAR;CALF;AAOA,mBAAmB,KAAnB,CAAyB;AACvB,UAAQ,CAAR;AACA,YAAU,CAAV;CAFF,EAGG;AACD,UAAQ,IAAR;AACA,UAAQ,KAAR;CALF;AAOA,SAAS,KAAT,CAAe,cAAf,EAA+B,kBAA/B;;AAEA,IAAI,eAAe,SAAS,KAAT,CAAe,cAAf,CAAf;AACJ,UAAU,YAAV,CAAuB,YAAvB;AACA,UAAU,YAAV,CAAuB,aAAa,SAAb,CAAvB;AACA,QAAQ,IAAR,GAAe,cAAf;AACA,QAAQ,KAAR,GAAgB,YAAhB","file":"models/subscription.js","sourcesContent":["'use strict';\nvar mongoose = require('mongoose');\nvar ShortId = require('@hoist/mongoose-shortid');\nvar timestamps = require('mongoose-timestamp');\nvar environments = ['live', 'test', 'dev'];\nvar BBPromise = require('bluebird');\nvar Schema = mongoose.Schema;\nvar mongooseDelete = require('@hoist/mongoose-delete');\n\nvar SubscriptionSchema = new Schema({\n  schemaVersion: String,\n  _id: {\n    type: ShortId,\n    base: 64,\n    retries: 4,\n    len: 20\n  },\n  connector: { //key\n    type: String,\n    index: true,\n    required: 'subscriptions must belong to a connector'\n  },\n  active: {\n    type: Boolean,\n    default: false\n  },\n  endpoints: [String],\n  application: {\n    type: ShortId,\n    ref: 'Application',\n    index: true,\n    required: 'subscriptions must belong to an application'\n  },\n  meta: {\n    type: Schema.Types.Mixed\n  },\n  environment: {\n    type: String,\n    enum: {\n      values: environments,\n      message: 'subscriptions must belong to a valid environment'\n    },\n    required: 'subscriptions must belong to a valid environment'\n  },\n  nextPoll: {\n    type: Date\n  }\n});\n\nSubscriptionSchema.plugin(mongooseDelete);\nSubscriptionSchema.plugin(timestamps);\nSubscriptionSchema.index({\n  connector: 1,\n  application: 1,\n  environment: 1\n}, {\n  unique: true\n});\nSubscriptionSchema.index({\n  active: 1,\n  nextPoll: 1,\n}, {\n  sparse: true,\n  unique: false\n});\nmongoose.model('Subscription', SubscriptionSchema);\n\nvar Subscription = mongoose.model('Subscription');\nBBPromise.promisifyAll(Subscription);\nBBPromise.promisifyAll(Subscription.prototype);\nexports.name = 'Subscription';\nexports.model = Subscription;\n"],"sourceRoot":"/source/"}